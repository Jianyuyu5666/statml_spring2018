library(tidyverse)
library(tree)
install.packages(tree)
install.packages('tree')
library(tidyverse)
library(tree)
library(randomForest)
install.packages('randomForest')
install.packages('gbm')
install.packages('ROCR')
install.packages('e1071')
install.packages('e1071')
install.packages('ISLR')
install.packages('imager')
library(tidyverse)
library(tree)
library(randomForest)
library(gbm)
library(ROCR)
library(e1071)
library(ISLR)
library(imager)
x <- c(1:1000)
length(unique(sample(x,1000,replace=TRUE)))
load("faces_array.RData")
face_mat <- sapply(1:1000, function(i) as.numeric(faces_array[, , i])) %>% t
plot_face <- function(image_vector) {
plot(as.cimg(t(matrix(image_vector, ncol=100))), axes=FALSE, asp=1)
}
avg_face=colMeans(face_mat, na.rm = FALSE, dims = 1)
plot_face(avg_face)
pr.out=prcomp((face_mat),center = TRUE, scale = FALSE)
library(tidyverse)
library(tree)
library(randomForest)
library(gbm)
library(ROCR)
library(e1071)
library(ISLR)
library(imager)
x <- c(1:1000)
length(unique(sample(x,1000,replace=TRUE)))
load("faces_array.RData")
face_mat <- sapply(1:1000, function(i) as.numeric(faces_array[, , i])) %>% t
plot_face <- function(image_vector) {
plot(as.cimg(t(matrix(image_vector, ncol=100))), axes=FALSE, asp=1)
}
avg_face=colMeans(face_mat, na.rm = FALSE, dims = 1)
plot_face(avg_face)
pr.out=prcomp((face_mat),center = TRUE, scale = FALSE)
pr.var=pr.out$sdev ^2
pve=pr.var/sum(pr.var)
plot(pve[]*100, xlab="Principal Component",
ylab="Proportion of Variance Explained (Percent)", ylim=c(0,50),type='b')
plot(cumsum(pve[0:10])*100, xlab="Principal Component ",
ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,100), type='b')
cumsum(pve[1:5])[5]*100
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 1:16)
plot_face(pr.out$rotation[,i])
par(mar=rep(0.5,4), mfrow = c(4,4))
faces_pc1<-face_mat[order(pr.out$rotation[1,]),]
#par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 1:5)
plot_face(faces_pc1[i,])
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 996:1000)
plot_face(faces_pc1[i,])
faces_pc5<-face_mat[order(pr.out$rotation[5,]),]
#par(mar=rep(0.5,4), mfrow = c(4,4))
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 996:1000)
plot_face(faces_pc5[i,])
for (i in 1:5)
plot_face(faces_pc5[i,])
dim(pr.out$x)
par(mfrow=c(1, 5))
for (i in c(10,50,100,300)){
compression<-pr.out$x[,1:i] %*% t(pr.out$rotation)[1:i,]
plot_face(compression[5,])+avg_face}
dim(Caravan)
Caravan.train <- Caravan[1:1000,]
Caravan.test <- Caravan[1001:5822,]
set.seed(1)
boost.caravan  = gbm(ifelse(Purchase=="Yes",1,0)~., data=Caravan.train,
distribution="bernoulli", n.trees=500, interaction.depth=4, shrinkage = 0.01 )
summary(boost.caravan)
rf.caravan = randomForest(Purchase ~ ., data=Caravan.train, mtry=3, ntree=500, importance=TRUE)
rf.caravan
k<-(importance(rf.caravan))
k[order(k[,3]),]
varImpPlot(rf.caravan)
yhat.boost = as.factor(ifelse(predict(boost.caravan, newdata = Caravan.test, n.trees=500, type = "response")>0.2,"Yes","No"))
boost.err = table(pred = yhat.boost, truth = Caravan.test$Purchase)
boost.err
yhat.rf = predict (rf.caravan, newdata = Caravan.test)
rf.err = table(pred = yhat.rf, truth = Caravan.test$Purchase)
rf.err
rf.err[2,2]/sum(rf.err[2,])
qplot(nonlinear$X1,nonlinear$X2,color=nonlinear$Y)
library(tidyverse)
library(tree)
library(randomForest)
library(gbm)
library(ROCR)
library(e1071)
library(ISLR)
library(imager)
x <- c(1:1000)
length(unique(sample(x,1000,replace=TRUE)))
load("faces_array.RData")
face_mat <- sapply(1:1000, function(i) as.numeric(faces_array[, , i])) %>% t
plot_face <- function(image_vector) {
plot(as.cimg(t(matrix(image_vector, ncol=100))), axes=FALSE, asp=1)
}
avg_face=colMeans(face_mat, na.rm = FALSE, dims = 1)
plot_face(avg_face)
pr.out=prcomp((face_mat),center = TRUE, scale = FALSE)
pr.var=pr.out$sdev ^2
pve=pr.var/sum(pr.var)
plot(pve[]*100, xlab="Principal Component",
ylab="Proportion of Variance Explained (Percent)", ylim=c(0,50),type='b')
plot(cumsum(pve[0:10])*100, xlab="Principal Component ",
ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,100), type='b')
cumsum(pve[1:5])[5]*100
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 1:16)
plot_face(pr.out$rotation[,i])
par(mar=rep(0.5,4), mfrow = c(4,4))
faces_pc1<-face_mat[order(pr.out$rotation[1,]),]
#par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 1:5)
plot_face(faces_pc1[i,])
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 996:1000)
plot_face(faces_pc1[i,])
faces_pc5<-face_mat[order(pr.out$rotation[5,]),]
#par(mar=rep(0.5,4), mfrow = c(4,4))
par(mar=rep(0.5,4), mfrow = c(4,4))
for (i in 996:1000)
plot_face(faces_pc5[i,])
for (i in 1:5)
plot_face(faces_pc5[i,])
dim(pr.out$x)
par(mfrow=c(1, 5))
for (i in c(10,50,100,300)){
compression<-pr.out$x[,1:i] %*% t(pr.out$rotation)[1:i,]
plot_face(compression[5,])+avg_face}
dim(Caravan)
Caravan.train <- Caravan[1:1000,]
Caravan.test <- Caravan[1001:5822,]
set.seed(1)
boost.caravan  = gbm(ifelse(Purchase=="Yes",1,0)~., data=Caravan.train,
distribution="bernoulli", n.trees=500, interaction.depth=4, shrinkage = 0.01 )
summary(boost.caravan)
rf.caravan = randomForest(Purchase ~ ., data=Caravan.train, mtry=3, ntree=500, importance=TRUE)
rf.caravan
k<-(importance(rf.caravan))
k[order(k[,3]),]
varImpPlot(rf.caravan)
yhat.boost = as.factor(ifelse(predict(boost.caravan, newdata = Caravan.test, n.trees=500, type = "response")>0.2,"Yes","No"))
boost.err = table(pred = yhat.boost, truth = Caravan.test$Purchase)
boost.err
yhat.rf = predict (rf.caravan, newdata = Caravan.test)
rf.err = table(pred = yhat.rf, truth = Caravan.test$Purchase)
rf.err
rf.err[2,2]/sum(rf.err[2,])
qplot(nonlinear$X1,nonlinear$X2,color=nonlinear$Y)
# grid of points over sample space
gr <- expand.grid(X1=seq(-5, 5, by=0.1), # sample points in X1
X2=seq(-5, 5, by=0.1)) # sample points in X2
logistic.fit = glm(Y ~ X1 + X2 ,data=nonlinear, family=binomial)
logistic.fit = glm(Y ~ X1 + X2 ,data=X, family=binomial)
nonlinear <-read_csv('nonlinear.csv')
logistic.fit = glm(Y ~ X1 + X2 ,data=X, family=binomial)
nonlinear <-read_csv('nonlinear.csv')
logistic.fit = glm(Y ~ X1 + X2 ,data=nonlinear, family=binomial)
decision<-ifelse(predict(logistic.fit, gr, type="response")>0.5,1,0)
qplot(gr[,1],gr[,2],color=decision)
nonlinear_poly=as.data.frame(poly(X,2,raw=TRUE))
nonlinear_poly=as.data.frame(poly(nonlinear,2,raw=TRUE))
