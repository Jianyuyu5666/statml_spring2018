install.packages(tidyverse)
install.packages('tidyverse')
install.packages('httr', 'rvest', 'xml2')
install.packages('tidyverse')
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("repurrrsive")
install.packages("furrr")
install.packages("furrr")
ap <- available.packages()
View(ap)
"furrr" %in% rownames(ap)
ls
install.packages(raster)
install.packages("raster")
install.packages("rgeos")
install.packages("rgeos")
# example data
x <- raster(system.file("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs", package="raster"))
library(raster)
# example data
x <- raster(system.file("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs", package="raster"))
install.packages("rgdal")
install.packages("rgdal")
library(raster)
# example data
x <- raster(system.file("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs", package="raster"))
# example data
x <- raster("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs"))
# example data
x <- raster("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs")
# make all values the same. Either do
r <- x > -Inf
# convert to polygons (you need to have package 'rgeos' installed for this to work)
pp <- rasterToPolygons(r, dissolve=TRUE)
library(raster)
# example data
x <- raster("/home/rave/deeplearn_imagery/data/raw/stephtest/PROJECTED_IMAGES/01_MS_GS_wgs")
# make all values the same.
r <- x > -Inf
gdal_polygonizeR <- function(x, outshape=NULL, gdalformat = 'ESRI Shapefile',
pypath=NULL, readpoly=TRUE, quiet=TRUE) {
if (isTRUE(readpoly)) require(rgdal)
if (is.null(pypath)) {
pypath <- Sys.which('gdal_polygonize.py')
}
if (!file.exists(pypath)) stop("Can't find gdal_polygonize.py on your system.")
owd <- getwd()
on.exit(setwd(owd))
setwd(dirname(pypath))
if (!is.null(outshape)) {
outshape <- sub('\\.shp$', '', outshape)
f.exists <- file.exists(paste(outshape, c('shp', 'shx', 'dbf'), sep='.'))
if (any(f.exists))
stop(sprintf('File already exists: %s',
toString(paste(outshape, c('shp', 'shx', 'dbf'),
sep='.')[f.exists])), call.=FALSE)
} else outshape <- tempfile()
if (is(x, 'Raster')) {
require(raster)
writeRaster(x, {f <- tempfile(fileext='.asc')})
rastpath <- normalizePath(f)
} else if (is.character(x)) {
rastpath <- normalizePath(x)
} else stop('x must be a file path (character string), or a Raster object.')
system2('python', args=(sprintf('"%1$s" "%2$s" -f "%3$s" "%4$s.shp"',
pypath, rastpath, gdalformat, outshape)))
if (isTRUE(readpoly)) {
shp <- readOGR(dirname(outshape), layer = basename(outshape), verbose=!quiet)
return(shp)
}
return(NULL)
}
p <- gdal_polygonizeR(r)
source('~/deeplearn_imagery/scripts/raster_boundaries.r')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
doeval = TRUE
doecho = FALSE
library(knitr)
library(tidyverse)
library(kableExtra)
library(ggmap)
library(maps)
library(Rtsne)
library(NbClust)
library(tree)
library(maptree)
library(class)
library(reshape2)
library(glmnet)
install.packages("glmnet")
install.packages("knitr", "kableExtra", "ggmap", "Rtsne", "NbClust", "tree", "maptree")
install.packages("knitr", "kableExtra", "ggmap", "Rtsne", "NbClust", "tree", "maptree")
install.packages("knitr")
install.packages("kableExtra")
install.packages("ggmap")
install.packages("maps")
install.packages("Rtsne")
install.packages("NbClust")
install.packages("tree")
install.packages("maptree")
install.packages("class")
install.packages("reshape2")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
doeval = TRUE
doecho = FALSE
library(knitr)
library(tidyverse)
library(kableExtra)
library(ggmap)
library(maps)
library(Rtsne)
library(NbClust)
library(tree)
library(maptree)
library(class)
library(reshape2)
library(glmnet)
election.raw = read.csv("data/election/election.csv") %>% as.tbl
census_meta = read.csv("data/census/metadata.csv", sep = ";") %>% as.tbl
census = read.csv("data/census/census.csv") %>% as.tbl
census$CensusTract = as.factor(census$CensusTract)
setwd("~/Documents/DataMining/final")
election.raw = read.csv("data/election/election.csv") %>% as.tbl
census_meta = read.csv("data/census/metadata.csv", sep = ";") %>% as.tbl
census = read.csv("data/census/census.csv") %>% as.tbl
census$CensusTract = as.factor(census$CensusTract)
kable(election.raw %>% head(3))
kable(census %>% head, "html")  %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE) %>% scroll_box(width = "100%")
kable(election.raw %>% head(3))
kable(census_meta)
kable(census_meta)
kable(census_meta)
election_federal = filter(election.raw, fips=='US')[order(election_federal$votes),]
election_state = filter(election.raw, fips!='US' & is.na(county))
election_county = filter(election.raw, !is.na(county))
election_federal = filter(election.raw, fips=='US')
election_federal = election_federal[order(election_federal$votes),]
election_state = filter(election.raw, fips!='US' & is.na(county))
election_county = filter(election.raw, !is.na(county))
length(unique((election.raw$candidate)))
by_candidate <- election.raw %>% group_by(candidate) %>% summarise(total_votes = sum(votes))
ggplot(data = election_federal, aes(x=reorder(candidate, -votes), y=votes)) +
geom_bar(stat="identity") +
labs(title='Candidate National Votes') +
ylab('Vote Count') +
theme(axis.text.x= element_text(angle=-80, size = 7))
library(dplyr)
election_county %>% dplyr::group_by(county) %>% mutate_at(total = sum(votes))
library(dplyr)
election_county %>% dplyr::group_by(county) %>% mutate_at(.vars = vars(votes),total = sum(votes))
